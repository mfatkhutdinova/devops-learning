Докер — это открытая платформа для разработки, доставки и эксплуатации приложений. 
В своем ядре docker позволяет запускать практически любое приложение, безопасно изолированное в контейнере. Безопасная изоляция позволяет вам запускать на одном хосте много контейнеров одновременно.

Прелесть docker в том, не нужно заботиться о софте, который установлен на сервере или виртуалке. Мы переносим софт со всеми тонкостями на другой сервер и он работает.

Мы уже знаем, что образ — это read-only шаблон, из которого создается контейнер. Каждый образ состоит из набора уровней. Docker использует union file system для сочетания этих уровней в один образ. Union file system позволяет файлам и директориями из разных файловых систем (разным ветвям) прозрачно накладываться, создавая когерентную файловую систему.
Одна из причин, по которой docker легковесен — это использование таких уровней. 

Images (образы) .
Схемы нашего приложения, которые являются основой контейнеров. 

Containers (контейнеры) .
Создаются на основе образа и запускают само приложение. 
это образ Docker, вызванный к жизни.
Это - самодостаточная ОС, в которой имеется самое необходимое и код приложения.

Dockerfile .
это текстовый файл, содержащий набор операций, которые могут быть использованы для создания docker образа. 

Docker Hub .
Регистр Докер-образов. Грубо говоря, архив всех доступных образов. 
Если нужно, то можно содержать собственный регистр и использовать его для получения образов.

Docker Daemon (демон Докера) .
Фоновый сервис, запущенный на хост-машине, который отвечает за создание, запуск и уничтожение Докер-контейнеров. 
Демон — это процесс, который запущен на операционной системе, с которой взаимодействует клиент. Демон управляет образами, контейнерами, сетями и томами.

Серверная часть
работает на хост машине 
скачивает образы и запускает из них контейнеры 
создает сеть между контейнерами
собирает логи контейнеров 
создает новый образ

Docker Client (клиент Докера) .
Утилита командной строки, которая позволяет пользователю взаимодействовать с демоном. 
Существуют другие формы клиента, например, Kitematic, с графическим интерфейсом.

Docker-compose .
предназначен для быстрой настройки и запуска различных вариантов сред разработки docker. Расширение yml.
Освободит от необходимости сопровождать все вспомогательные  скрипты, предназначенные для организации работы, включая запуск, установление соединений, обновлений, установки контейнера.

Тома Docker .
наиболее предпочтительный механизм постоянног хранения даных, потребляемых и производимых приложениями.
Том — это файловая система, которая расположена на хост-машине за пределами контейнеров.


Дюжина инструкций Dockerfile .
FROM — задаёт базовый (родительский) образ.
MAINTAINER - позволяет указать автора образа.
LABEL — описывает метаданные. Например — сведения о том, кто создал и поддерживает образ.
ENV — устанавливает постоянные переменные среды.
RUN — выполняет команду и создаёт слой образа. Используется для установки пакетов и библиотек внутри контейнера.
COPY — копирует в контейнер файлы и папки.
ADD — копирует файлы и папки в контейнер, может распаковывать локальные .tar-файлы.

CMD — инструкция для запуска чего-либо во время запуска самого контейнера. Аргументы могут быть переопределены при запуске контейнера. 
В файле может присутствовать лишь одна инструкция CMD.
ENTRYPOINT — предоставляет команду с аргументами для вызова во время выполнения контейнера. Аргументы не переопределяются.
WORKDIR — задаёт рабочую директорию для следующей инструкции.
ARG — задаёт переменные для передачи Docker во время сборки образа.
EXPOSE — указывает на необходимость открыть порт.
VOLUME — создаёт точку монтирования для работы с постоянным хранилищем.

Если вы используете режим shell для ENTRYPOINT, CMD игнорируется.
При использовании режима exec для ENTRYPOINT аргументы CMD добавляются в конце.
При использовании режима exec для инструкции ENTRYPOINT необходимо использовать режим exec и для инструкции CMD. Если этого не сделать, Docker попытается добавить sh -c в уже добавленные аргументы, что может привести к некоторым непредсказуемым результатам.

С помощью кэширования ускорятеся сборка образа.

Best practice:
не пишем много RUN RUN 
после установки пакетов можем сразу удалить их хэши 
использовать alpine 
часто изменяемые слои ставить последними
использовать теги версий
проверяем на уезвимости snyk.io 

Docker, по порядку, делает следующее:
скачивает образ ubuntu: docker проверяет наличие образа ubuntu на локальной машине, и если его нет — то скачивает его с Docker Hub. Если же образ есть, то использует его для создания контейнера;
создает контейнер: когда образ получен, docker использует его для создания контейнера;
инициализирует файловую систему и монтирует read-only уровень: контейнер создан в файловой системе и read-only уровень добавлен образ;
инициализирует сеть/мост: создает сетевой интерфейс, который позволяет docker-у общаться хост машиной;
Установка IP адреса: находит и задает адрес;
Запускает указанный процесс: запускает ваше приложение;
Обрабатывает и выдает вывод вашего приложения: подключается и логирует стандартный вход, вывод и поток ошибок вашего приложения, что бы вы могли отслеживать как работает ваше приложение.

Union File Sysem или UnionFS — это файловая система, которая работает создавая уровни, делая ее очень легковесной и быстрой. 
Docker использует UnionFS для создания блоков, из которых строится контейнер. Docker может использовать несколько вариантов UnionFS включая: AUFS, btrfs, vfs и DeviceMapper.