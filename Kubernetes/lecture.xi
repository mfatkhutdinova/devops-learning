Kubernetes - это технология, которая позволяет автоматизировать развертывание и масштабирование контейнеризированных приложений, а также управление ими.
Kubernetes - это менеджер контейнеров.

API сервер - входная точка для запуска в Kubernetes
Мастер - смотрит в API сервер. 
Кублет - нода агент, который стоит на всех серверах кластера и отправляет инфу докер демону о том, что нужно запустить какой-то контейнер.

Абстракции Kubernetes (YAML): .
  POD - минимальная абстракция, с которой работаей Kubernetes. Тут запускаются приложения. .
  В POD может быть несколько контейнеров. 
  1 POD = 1 контейнер 

  ReplicaSet - родитель POD, управляет тем, в каком кол-ве наше приложение должно запускаться. .
  Lables - метка 
  Selector - инструкция для репликасет, глядя в него понимает, какие POD его.

  Deployment - это родитель ReplicaSet. Нужен, чтобы нормально обновлять версии приложения. .
    Probes - контроль за состоянием приложения во время его жизни, старта, готово ли приложение. .
    Resources - содержит лимиты и резервировать запросы. .
      Limits - кол-во ресурсов, которые POD может использовать
      Reguets - кол-во ресурсов, которые резервируются для POD на ноде (CPU, memory)
    Secret - сущность для хранения паролей, токены, сертификаты и т.д. .
  
  ConfigMap - сущность, которая хранит настройки приложения. .
  Можно указывать про настройки монтирования, про тома.

  Service - умеет объединять разрозненные поды со случайными ip адресами объединить и каким-то образом и распределять на них трафик .
  Ingress - для получения запросов с наружим. Описывает правила доступа к нашему приложению .
  PV/PVC - описывает том, на котором хранятся наши данные (БД) .
  StorageClass - манифест, в котором описывается параметры доступа к провайдеру хранения данных .

Компоненты кластера .
  Etcd - тут хранится вся информация о нашем кластере, все настройки .
    Etcdctl - утилита упраления кластером ETCD
    Требует быстрых дисков 

  API server - центральный компонет Kubernetes .
    Единственный, кто общается с Etcd
    Работает по REST API 
    Авторизация и аутентификация 

  Controller-manager - набор контроллеров .
    Node controller - контролирует состояние нод 
    Replication controller - контролирует репликасеты
    Endpoints controller
    И другие..
    GarbageCollecor - сборщик музыка

  Scheduler - назначает PODы на нады, учитывая: .
    QoS
    Affinity/anti-Affinity - смотрит на правила, где нужно запсукать приложения
    Requested resources - учитывает лимиты, запросы, зарезервированные ресурсы

  Kubelet - работает на каждой ноде .
    Единственный компонент, работающий не в Docker 
    Отдает команды Docker daemon 
    Создает PODы

  Kube-proxy - управляет сетевыми правилами на нодах .
    Смотрит в Kube-API
    Стоит на всех серверах 
    Фактически реализует Service (ipvs и iptables) 

  Контейнеризация - docker .
  Сеть .
  DNS .

Сеть Kubernetes .
  Network plugin (Flannel, Calico) .
    Обеспечивает связь между нодами и подами 
    Раздает IP-адреса подам
    Реализует шифрование между нодами 
    Управляет Network Policies

Kubespray .
  Это сценарий для установки Kubernetes 

Продвинутые абстракции .
  DeamonSet: .
    - запускает поды на всех нодах кластера 
    - при добавлении ноды - добавляет под 
    - при удалении ноды GC удаляет под 
    - описание практически полностью соответствует Deployment  (кол-во реплик не указываем, кол-во реплик = кол-во узлов в кластере)
    - tolerations - зараза и сопротивляемость 
  
  StatefulSet .
    - позволяет запускать группу подов (как Deployment)
    - гарантирует их уникальность
    - гарантирует их последовательность
    - PVC template
    - при удалении не удаляет PVC 
    - используется для запуска приложений с сохранением состояния 
      - Rabbit 
      - DBs
      - Redis
      - Kafka 
  
  InitContainers .
    - позволяет выполнить настройки перед запуском основного приложения
    - выполняются по порядку описания в манифесте
    - можно монтировать те же тома, что и в основных контейнерах 
    - можно щапускать от другого пользователя 
    - должен выполнить дейтсвие и остановиться

  Headless Service .
    - spec.clusterIP: None
    - резолвится в IP всех экдпоинтов
    - создает записи с именами всех эндпоинтов


  Job .
    - создает POD для выполнения задачи (обычно испоьзуют для единоразового использвания (env настроить))
    - перезапускает PODы до успешного выполнения задачи
    - или истечения таймаутов (activeDeadLineSeconds, backoffLimit) 

  CronJob .
    - создает Job по расписанию  (cron формат)
    - важные параметры:
      - startingDeadlineSeconds - стремная опция. Работает не так, как описано в доке. Никогда лучше не испоьзовать.
      - concurrencyPolicy - Allow/Forbit запуск экземпляов в одно и тоже время. Использовать Forbit
      - successfulJobsHistoryLimit - кол-во успешных выполненных задач сохраняем 
      - failedJobsHistoryLimit - кол-во неудачных выполненных задач сохраняем

  Role Based Access Control (RBAC) .
    - ServiceAccount - (в Kubernetes нет юзеров) сущность придумана для того, чтобы приложения Kubernetes работали под ServiceAccount
    - Role - описывает, что можно делатьв разделе Kubernetes (правила)
    - RoleBinding - в сущности указывается связь ServiceAccount с Role
    - ClusterRole - то же самое, что и Role, толко действует на весь кластер 
    - ClusterRoleBinding - то же самое, что и RoleBinding, толко действует на весь кластер

  Задача мониторинга: .
  - на каждой ноде автоматически запускается агент 
  - управляются агенты из одной точки
  - конфигурируются так же из одной точки 

Публикация приложений .
  Kubernetes Service: .
    - ClusterIP - настройка взаимодействий PODов внутри. Не внешне 
    - NodePort - публикация внешне (порты от 3000 до 32000)
    - LoadBanalcer - публикация внешне, но в облаках 
    - ExternalName - можно перенаправлять запросы на другие сервисы (почти не используется)
    - ExternalIPs - при создании сервиса на всех серверах кластера создаются по аналогии с Service type: Node Port правило трансляции, 
      который говорит, что трафик, приходящий на адресс ExternalIPs надо отправлять в PODы. Эти правила будут создавны на всех серверах.
      Это решает админ кластера с задачей балансера. 
    - Headless - none 

  Ingress .
    - IngressController - работает на принципе балансера 
    - манифест, в котором описано правило для IngressController 
    - annotations - возможность передать какую-то специфическую информацию контроллеру или оператору (то, что не влезает в манифест)

  Cert-manager .
    - начинался как способ получить сертификат от LetsEncrypt
    - автоматизирует получение SSL/TLS-серификатов от различных удостовуряющих центров (LetsEncrypt)
    - интергрируется с IngressController
    - автоматизирует продление сертификатов 

